[{"name": "app.py", "content": "from shiny import App, reactive, ui, render\n\ntimer = ui.HTML('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"timer \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z\"/><path d=\"M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3\"/></svg>')\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Survey Length Estimator\"),\n    ui.row(\n        ui.column(8,\n            ui.input_numeric(\"simple\", \"Number of simple questions (yes/no, or a simple scale)\", value=0, width='800px'),\n            ui.input_numeric(\"multi\", \"Total number of choices in multiple choice or rank questions\", value=0, width='800px'),\n            ui.input_numeric(\"short_ans\", \"Number of short response questions (1 Sentence expected)\", value=0, width='800px'),\n            ui.input_numeric(\"long_ans\", \"Number of long respponse questions (3-4 sentences expected)\", value=0, width='800px'),\n            ui.input_numeric(\"calculations\", \"Number of questions requiring minor calculations\", value=0, width='800px'),\n            ui.input_numeric(\"map\", \"Number of map or spatial response questions\", value=0, width='800px'),\n            ui.input_numeric(\"likert\", \"\"\"Total number of likert or \"grid response\" qestions\"\"\", value=0, width='800px'),\n            ui.input_numeric(\"instructions\", \"Total Number of Sentances of Instructions\", value=0, width='800px')\n        ),\n        ui.column(4,\n            ui.value_box(\n                \"Estimated Survey Length\",\n                value=ui.output_text(\"current_value\"),\n                showcase=timer,\n                theme=\"bg-gradient-blue-purple\"\n            )\n        )\n    )\n)\n\ndef handle_none(value):\n    \"\"\"Return 0 if the value is None, otherwise return the value.\"\"\"\n    return 0 if value is None else value\n\ndef plural(value):\n    \"\"\"return 's' ending for plurals if needed\"\"\"\n    return \"\" if value == 1 else \"s\"\n\ndef server(input, output, session):\n    \n    @render.text\n    def current_value():\n        simple_points = handle_none(input.simple())\n        multi_points = handle_none(input.multi()) / 2\n        short_points = handle_none(input.short_ans())*3\n        long_points = handle_none(input.long_ans())*10\n        map_points = handle_none(input.map())*4\n        calc_points = handle_none(input.calculations())*2\n        likert_points = handle_none(input.likert())\n        instruction_points = handle_none(input.instructions())/3\n        total = sum([simple_points, multi_points, short_points, long_points, map_points, calc_points, likert_points, instruction_points])\n        time = total/8\n        minutes = int(time)\n        seconds = int((time-minutes)*60)\n        return f\"{minutes} minute{plural(minutes)} and {seconds} second{plural(seconds)}\"\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()\n", "type": "text"}, {"name": "README.md", "content": "# survey_calculator\n A calculator for survey length based on the question types\n", "type": "text"}]